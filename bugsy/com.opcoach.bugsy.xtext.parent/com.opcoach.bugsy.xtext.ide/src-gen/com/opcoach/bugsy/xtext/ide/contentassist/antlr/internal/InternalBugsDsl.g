/*
 * generated by Xtext 2.12.0
 */
grammar InternalBugsDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.opcoach.bugsy.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.opcoach.bugsy.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.opcoach.bugsy.xtext.services.BugsDslGrammarAccess;

}
@parser::members {
	private BugsDslGrammarAccess grammarAccess;

	public void setGrammarAccess(BugsDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleBugsModel
entryRuleBugsModel
:
{ before(grammarAccess.getBugsModelRule()); }
	 ruleBugsModel
{ after(grammarAccess.getBugsModelRule()); } 
	 EOF 
;

// Rule BugsModel
ruleBugsModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBugsModelAccess().getGroup()); }
		(rule__BugsModel__Group__0)
		{ after(grammarAccess.getBugsModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInstruction
entryRuleInstruction
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
		(rule__Instruction__Alternatives)
		{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFor
entryRuleFor
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAccess().getGroup()); }
		(rule__For__Group__0)
		{ after(grammarAccess.getForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelation
entryRuleRelation
:
{ before(grammarAccess.getRelationRule()); }
	 ruleRelation
{ after(grammarAccess.getRelationRule()); } 
	 EOF 
;

// Rule Relation
ruleRelation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelationAccess().getGroup()); }
		(rule__Relation__Group__0)
		{ after(grammarAccess.getRelationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperation
entryRuleOperation
:
{ before(grammarAccess.getOperationRule()); }
	 ruleOperation
{ after(grammarAccess.getOperationRule()); } 
	 EOF 
;

// Rule Operation
ruleOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperationAccess().getGroup()); }
		(rule__Operation__Group__0)
		{ after(grammarAccess.getOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumeric
entryRuleNumeric
:
{ before(grammarAccess.getNumericRule()); }
	 ruleNumeric
{ after(grammarAccess.getNumericRule()); } 
	 EOF 
;

// Rule Numeric
ruleNumeric 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericAccess().getAlternatives()); }
		(rule__Numeric__Alternatives)
		{ after(grammarAccess.getNumericAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameter
entryRuleParameter
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterAccess().getGroup()); }
		(rule__Parameter__Group__0)
		{ after(grammarAccess.getParameterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Distribution
ruleDistribution
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistributionAccess().getAlternatives()); }
		(rule__Distribution__Alternatives)
		{ after(grammarAccess.getDistributionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Function
ruleFunction
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getAlternatives()); }
		(rule__Function__Alternatives)
		{ after(grammarAccess.getFunctionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RelationType
ruleRelationType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationTypeAccess().getAlternatives()); }
		(rule__RelationType__Alternatives)
		{ after(grammarAccess.getRelationTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInstructionAccess().getForParserRuleCall_0()); }
		ruleFor
		{ after(grammarAccess.getInstructionAccess().getForParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getInstructionAccess().getRelationParserRuleCall_1()); }
		ruleRelation
		{ after(grammarAccess.getInstructionAccess().getRelationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Numeric__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericAccess().getINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumericAccess().getINTTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericAccess().getFLOATTerminalRuleCall_1()); }
		RULE_FLOAT
		{ after(grammarAccess.getNumericAccess().getFLOATTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getNumericParserRuleCall_0()); }
		ruleNumeric
		{ after(grammarAccess.getValueAccess().getNumericParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getValueAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Distribution__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDistributionAccess().getDbernEnumLiteralDeclaration_0()); }
		('dbern')
		{ after(grammarAccess.getDistributionAccess().getDbernEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDbetaEnumLiteralDeclaration_1()); }
		('dbeta')
		{ after(grammarAccess.getDistributionAccess().getDbetaEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDbinEnumLiteralDeclaration_2()); }
		('dbin')
		{ after(grammarAccess.getDistributionAccess().getDbinEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDchisqrEnumLiteralDeclaration_3()); }
		('dchisqr')
		{ after(grammarAccess.getDistributionAccess().getDchisqrEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDdexpEnumLiteralDeclaration_4()); }
		('ddexp')
		{ after(grammarAccess.getDistributionAccess().getDdexpEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDexpEnumLiteralDeclaration_5()); }
		('dexp')
		{ after(grammarAccess.getDistributionAccess().getDexpEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDfEnumLiteralDeclaration_6()); }
		('df')
		{ after(grammarAccess.getDistributionAccess().getDfEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDgammaEnumLiteralDeclaration_7()); }
		('dgamma')
		{ after(grammarAccess.getDistributionAccess().getDgammaEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDgengammEnumLiteralDeclaration_8()); }
		('dgen.gamma')
		{ after(grammarAccess.getDistributionAccess().getDgengammEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDhyperEnumLiteralDeclaration_9()); }
		('dhyper')
		{ after(grammarAccess.getDistributionAccess().getDhyperEnumLiteralDeclaration_9()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDlogisEnumLiteralDeclaration_10()); }
		('dlogis')
		{ after(grammarAccess.getDistributionAccess().getDlogisEnumLiteralDeclaration_10()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDlnormEnumLiteralDeclaration_11()); }
		('dlnorm')
		{ after(grammarAccess.getDistributionAccess().getDlnormEnumLiteralDeclaration_11()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDnegbinEnumLiteralDeclaration_12()); }
		('dnegbin')
		{ after(grammarAccess.getDistributionAccess().getDnegbinEnumLiteralDeclaration_12()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDnchisqrEnumLiteralDeclaration_13()); }
		('dnchisqr')
		{ after(grammarAccess.getDistributionAccess().getDnchisqrEnumLiteralDeclaration_13()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDnormEnumLiteralDeclaration_14()); }
		('dnorm')
		{ after(grammarAccess.getDistributionAccess().getDnormEnumLiteralDeclaration_14()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDparEnumLiteralDeclaration_15()); }
		('dpar')
		{ after(grammarAccess.getDistributionAccess().getDparEnumLiteralDeclaration_15()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDpoisEnumLiteralDeclaration_16()); }
		('dpois')
		{ after(grammarAccess.getDistributionAccess().getDpoisEnumLiteralDeclaration_16()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDtEnumLiteralDeclaration_17()); }
		('dt')
		{ after(grammarAccess.getDistributionAccess().getDtEnumLiteralDeclaration_17()); }
	)
	|
	(
		{ before(grammarAccess.getDistributionAccess().getDweibEnumLiteralDeclaration_18()); }
		('dweib')
		{ after(grammarAccess.getDistributionAccess().getDweibEnumLiteralDeclaration_18()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getAcosEnumLiteralDeclaration_0()); }
		('acos')
		{ after(grammarAccess.getFunctionAccess().getAcosEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getAcoshEnumLiteralDeclaration_1()); }
		('acosh')
		{ after(grammarAccess.getFunctionAccess().getAcoshEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getAsinEnumLiteralDeclaration_2()); }
		('asin')
		{ after(grammarAccess.getFunctionAccess().getAsinEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getAsinhEnumLiteralDeclaration_3()); }
		('asinh')
		{ after(grammarAccess.getFunctionAccess().getAsinhEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getAtanEnumLiteralDeclaration_4()); }
		('atan')
		{ after(grammarAccess.getFunctionAccess().getAtanEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getLogEnumLiteralDeclaration_5()); }
		('log')
		{ after(grammarAccess.getFunctionAccess().getLogEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getEpEnumLiteralDeclaration_6()); }
		('exp')
		{ after(grammarAccess.getFunctionAccess().getEpEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionAccess().getCEnumLiteralDeclaration_7()); }
		('c')
		{ after(grammarAccess.getFunctionAccess().getCEnumLiteralDeclaration_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationTypeAccess().getSTOCHASTICEnumLiteralDeclaration_0()); }
		('~')
		{ after(grammarAccess.getRelationTypeAccess().getSTOCHASTICEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationTypeAccess().getDETERMIN1EnumLiteralDeclaration_1()); }
		('<-')
		{ after(grammarAccess.getRelationTypeAccess().getDETERMIN1EnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationTypeAccess().getDETERMIN2EnumLiteralDeclaration_2()); }
		('=')
		{ after(grammarAccess.getRelationTypeAccess().getDETERMIN2EnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BugsModel__Group__0__Impl
	rule__BugsModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBugsModelAccess().getBugsModelAction_0()); }
	()
	{ after(grammarAccess.getBugsModelAccess().getBugsModelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BugsModel__Group__1__Impl
	rule__BugsModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBugsModelAccess().getModelKeyword_1()); }
	'model'
	{ after(grammarAccess.getBugsModelAccess().getModelKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BugsModel__Group__2__Impl
	rule__BugsModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBugsModelAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getBugsModelAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BugsModel__Group__3__Impl
	rule__BugsModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBugsModelAccess().getInstructionsAssignment_3()); }
	(rule__BugsModel__InstructionsAssignment_3)*
	{ after(grammarAccess.getBugsModelAccess().getInstructionsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BugsModel__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BugsModel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBugsModelAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getBugsModelAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForAction_0()); }
	()
	{ after(grammarAccess.getForAccess().getForAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForKeyword_1()); }
	'for'
	{ after(grammarAccess.getForAccess().getForKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getForAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getVariableAssignment_3()); }
	(rule__For__VariableAssignment_3)
	{ after(grammarAccess.getForAccess().getVariableAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__4__Impl
	rule__For__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getInKeyword_4()); }
	'in'
	{ after(grammarAccess.getForAccess().getInKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__5__Impl
	rule__For__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLowAssignment_5()); }
	(rule__For__LowAssignment_5)
	{ after(grammarAccess.getForAccess().getLowAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__6__Impl
	rule__For__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getColonKeyword_6()); }
	':'
	{ after(grammarAccess.getForAccess().getColonKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__7__Impl
	rule__For__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getHighAssignment_7()); }
	(rule__For__HighAssignment_7)
	{ after(grammarAccess.getForAccess().getHighAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__8__Impl
	rule__For__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getRightParenthesisKeyword_8()); }
	')'
	{ after(grammarAccess.getForAccess().getRightParenthesisKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__9__Impl
	rule__For__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLeftCurlyBracketKeyword_9()); }
	'{'
	{ after(grammarAccess.getForAccess().getLeftCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__10__Impl
	rule__For__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getContentsAssignment_10()); }
	(rule__For__ContentsAssignment_10)*
	{ after(grammarAccess.getForAccess().getContentsAssignment_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getRightCurlyBracketKeyword_11()); }
	'}'
	{ after(grammarAccess.getForAccess().getRightCurlyBracketKeyword_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Relation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__0__Impl
	rule__Relation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getNameAssignment_0()); }
	(rule__Relation__NameAssignment_0)
	{ after(grammarAccess.getRelationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__1__Impl
	rule__Relation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getRelationTypeAssignment_1()); }
	(rule__Relation__RelationTypeAssignment_1)
	{ after(grammarAccess.getRelationAccess().getRelationTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Relation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelationAccess().getLeftExprAssignment_2()); }
	(rule__Relation__LeftExprAssignment_2)
	{ after(grammarAccess.getRelationAccess().getLeftExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__0__Impl
	rule__Operation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getOperationAction_0()); }
	()
	{ after(grammarAccess.getOperationAccess().getOperationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__1__Impl
	rule__Operation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getUnorderedGroup_1()); }
	(rule__Operation__UnorderedGroup_1)
	{ after(grammarAccess.getOperationAccess().getUnorderedGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__2__Impl
	rule__Operation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__3__Impl
	rule__Operation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getGroup_3()); }
	(rule__Operation__Group_3__0)?
	{ after(grammarAccess.getOperationAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getOperationAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_3__0__Impl
	rule__Operation__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getElementsAssignment_3_0()); }
	(rule__Operation__ElementsAssignment_3_0)
	{ after(grammarAccess.getOperationAccess().getElementsAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getGroup_3_1()); }
	(rule__Operation__Group_3_1__0)*
	{ after(grammarAccess.getOperationAccess().getGroup_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__Group_3_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_3_1__0__Impl
	rule__Operation__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getCommaKeyword_3_1_0()); }
	','
	{ after(grammarAccess.getOperationAccess().getCommaKeyword_3_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__Group_3_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOperationAccess().getElementsAssignment_3_1_1()); }
	(rule__Operation__ElementsAssignment_3_1_1)
	{ after(grammarAccess.getOperationAccess().getElementsAssignment_3_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getParameterAction_0()); }
	()
	{ after(grammarAccess.getParameterAccess().getParameterAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterAccess().getValueAssignment_1()); }
	(rule__Parameter__ValueAssignment_1)
	{ after(grammarAccess.getParameterAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Operation__UnorderedGroup_1
	@init {
		int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getOperationAccess().getUnorderedGroup_1());
	}
:
	rule__Operation__UnorderedGroup_1__0
	?
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getOperationAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__Operation__UnorderedGroup_1__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
	}
:
		(
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getOperationAccess().getUnorderedGroup_1(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getOperationAccess().getUnorderedGroup_1(), 0);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getOperationAccess().getDistribAssignment_1_0()); }
					(rule__Operation__DistribAssignment_1_0)
					{ after(grammarAccess.getOperationAccess().getDistribAssignment_1_0()); }
				)
			)
		)|
		( 
			{getUnorderedGroupHelper().canSelect(grammarAccess.getOperationAccess().getUnorderedGroup_1(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getOperationAccess().getUnorderedGroup_1(), 1);
				}
				{
					selected = true;
				}
				(
					{ before(grammarAccess.getOperationAccess().getFunctionAssignment_1_1()); }
					(rule__Operation__FunctionAssignment_1_1)
					{ after(grammarAccess.getOperationAccess().getFunctionAssignment_1_1()); }
				)
			)
		)
		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getOperationAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}

rule__Operation__UnorderedGroup_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__UnorderedGroup_1__Impl
	rule__Operation__UnorderedGroup_1__1?
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__UnorderedGroup_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Operation__UnorderedGroup_1__Impl
;
finally {
	restoreStackSize(stackSize);
}


rule__BugsModel__InstructionsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBugsModelAccess().getInstructionsInstructionParserRuleCall_3_0()); }
		ruleInstruction
		{ after(grammarAccess.getBugsModelAccess().getInstructionsInstructionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__VariableAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getVariableIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getForAccess().getVariableIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__LowAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getLowINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getForAccess().getLowINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__HighAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getHighIDTerminalRuleCall_7_0()); }
		RULE_ID
		{ after(grammarAccess.getForAccess().getHighIDTerminalRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__ContentsAssignment_10
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForAccess().getContentsInstructionParserRuleCall_10_0()); }
		ruleInstruction
		{ after(grammarAccess.getForAccess().getContentsInstructionParserRuleCall_10_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__RelationTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getRelationTypeRelationTypeEnumRuleCall_1_0()); }
		ruleRelationType
		{ after(grammarAccess.getRelationAccess().getRelationTypeRelationTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Relation__LeftExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationAccess().getLeftExprOperationParserRuleCall_2_0()); }
		ruleOperation
		{ after(grammarAccess.getRelationAccess().getLeftExprOperationParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__DistribAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getDistribDistributionEnumRuleCall_1_0_0()); }
		ruleDistribution
		{ after(grammarAccess.getOperationAccess().getDistribDistributionEnumRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__FunctionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getFunctionFunctionEnumRuleCall_1_1_0()); }
		ruleFunction
		{ after(grammarAccess.getOperationAccess().getFunctionFunctionEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ElementsAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getElementsParameterParserRuleCall_3_0_0()); }
		ruleParameter
		{ after(grammarAccess.getOperationAccess().getElementsParameterParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operation__ElementsAssignment_3_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperationAccess().getElementsParameterParserRuleCall_3_1_1_0()); }
		ruleParameter
		{ after(grammarAccess.getOperationAccess().getElementsParameterParserRuleCall_3_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getParameterAccess().getValueValueParserRuleCall_1_0()); }
		ruleValue
		{ after(grammarAccess.getParameterAccess().getValueValueParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_INT : ('0'..'9')+;

RULE_FLOAT : RULE_INT '.' RULE_INT ('E' ('+'|'-') RULE_INT)?;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

RULE_ID : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'.'|'0'..'9')*;

RULE_ARRAYDIM : ('[' ('0'..'9')+|('a'..'z'|'A'..'Z')+ ']');
