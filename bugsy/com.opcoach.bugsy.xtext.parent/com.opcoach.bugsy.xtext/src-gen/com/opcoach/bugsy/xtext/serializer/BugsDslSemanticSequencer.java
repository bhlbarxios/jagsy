/*
 * generated by Xtext 2.12.0
 */
package com.opcoach.bugsy.xtext.serializer;

import com.google.inject.Inject;
import com.opcoach.bugsy.xtext.bugsDsl.BugsDslPackage;
import com.opcoach.bugsy.xtext.bugsDsl.BugsModel;
import com.opcoach.bugsy.xtext.bugsDsl.For;
import com.opcoach.bugsy.xtext.bugsDsl.Operation;
import com.opcoach.bugsy.xtext.bugsDsl.Relation;
import com.opcoach.bugsy.xtext.services.BugsDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class BugsDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BugsDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BugsDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BugsDslPackage.BUGS_MODEL:
				sequence_BugsModel(context, (BugsModel) semanticObject); 
				return; 
			case BugsDslPackage.FOR:
				sequence_For(context, (For) semanticObject); 
				return; 
			case BugsDslPackage.OPERATION:
				sequence_Operation(context, (Operation) semanticObject); 
				return; 
			case BugsDslPackage.PARAMETER:
				sequence_Parameter(context, (com.opcoach.bugsy.xtext.bugsDsl.Parameter) semanticObject); 
				return; 
			case BugsDslPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BugsModel returns BugsModel
	 *
	 * Constraint:
	 *     instructions+=Instruction*
	 */
	protected void sequence_BugsModel(ISerializationContext context, BugsModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns For
	 *     For returns For
	 *
	 * Constraint:
	 *     (variable=ID low=INT high=ID contents+=Instruction*)
	 */
	protected void sequence_For(ISerializationContext context, For semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Operation returns Operation
	 *
	 * Constraint:
	 *     ((distrib=Distribution | function=Function)* (elements+=Parameter elements+=Parameter*)?)
	 */
	protected void sequence_Operation(ISerializationContext context, Operation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     value=Value
	 */
	protected void sequence_Parameter(ISerializationContext context, com.opcoach.bugsy.xtext.bugsDsl.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BugsDslPackage.Literals.PARAMETER__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BugsDslPackage.Literals.PARAMETER__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getValueValueParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Instruction returns Relation
	 *     Relation returns Relation
	 *
	 * Constraint:
	 *     (name=ID relationType=RelationType leftExpr=Operation)
	 */
	protected void sequence_Relation(ISerializationContext context, Relation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BugsDslPackage.Literals.RELATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BugsDslPackage.Literals.RELATION__NAME));
			if (transientValues.isValueTransient(semanticObject, BugsDslPackage.Literals.RELATION__RELATION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BugsDslPackage.Literals.RELATION__RELATION_TYPE));
			if (transientValues.isValueTransient(semanticObject, BugsDslPackage.Literals.RELATION__LEFT_EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BugsDslPackage.Literals.RELATION__LEFT_EXPR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRelationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRelationAccess().getRelationTypeRelationTypeEnumRuleCall_1_0(), semanticObject.getRelationType());
		feeder.accept(grammarAccess.getRelationAccess().getLeftExprOperationParserRuleCall_2_0(), semanticObject.getLeftExpr());
		feeder.finish();
	}
	
	
}
