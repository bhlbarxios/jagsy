/*
 * generated by Xtext 2.12.0
 */
package com.opcoach.bugsy.xtext.ide.contentassist.antlr;

import com.google.inject.Inject;
import com.opcoach.bugsy.xtext.ide.contentassist.antlr.internal.InternalBugsDslParser;
import com.opcoach.bugsy.xtext.services.BugsDslGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BugsDslParser extends AbstractContentAssistParser {

	@Inject
	private BugsDslGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalBugsDslParser createParser() {
		InternalBugsDslParser result = new InternalBugsDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getNumericAccess().getAlternatives(), "rule__Numeric__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getDistributionAccess().getAlternatives(), "rule__Distribution__Alternatives");
					put(grammarAccess.getFunctionAccess().getAlternatives(), "rule__Function__Alternatives");
					put(grammarAccess.getRelationTypeAccess().getAlternatives(), "rule__RelationType__Alternatives");
					put(grammarAccess.getBugsModelAccess().getGroup(), "rule__BugsModel__Group__0");
					put(grammarAccess.getForAccess().getGroup(), "rule__For__Group__0");
					put(grammarAccess.getRelationAccess().getGroup(), "rule__Relation__Group__0");
					put(grammarAccess.getOperationAccess().getGroup(), "rule__Operation__Group__0");
					put(grammarAccess.getOperationAccess().getGroup_3(), "rule__Operation__Group_3__0");
					put(grammarAccess.getOperationAccess().getGroup_3_1(), "rule__Operation__Group_3_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getBugsModelAccess().getInstructionsAssignment_3(), "rule__BugsModel__InstructionsAssignment_3");
					put(grammarAccess.getForAccess().getVariableAssignment_3(), "rule__For__VariableAssignment_3");
					put(grammarAccess.getForAccess().getLowAssignment_5(), "rule__For__LowAssignment_5");
					put(grammarAccess.getForAccess().getHighAssignment_7(), "rule__For__HighAssignment_7");
					put(grammarAccess.getForAccess().getContentsAssignment_10(), "rule__For__ContentsAssignment_10");
					put(grammarAccess.getRelationAccess().getNameAssignment_0(), "rule__Relation__NameAssignment_0");
					put(grammarAccess.getRelationAccess().getRelationTypeAssignment_1(), "rule__Relation__RelationTypeAssignment_1");
					put(grammarAccess.getRelationAccess().getLeftExprAssignment_2(), "rule__Relation__LeftExprAssignment_2");
					put(grammarAccess.getOperationAccess().getDistribAssignment_1_0(), "rule__Operation__DistribAssignment_1_0");
					put(grammarAccess.getOperationAccess().getFunctionAssignment_1_1(), "rule__Operation__FunctionAssignment_1_1");
					put(grammarAccess.getOperationAccess().getElementsAssignment_3_0(), "rule__Operation__ElementsAssignment_3_0");
					put(grammarAccess.getOperationAccess().getElementsAssignment_3_1_1(), "rule__Operation__ElementsAssignment_3_1_1");
					put(grammarAccess.getParameterAccess().getValueAssignment_1(), "rule__Parameter__ValueAssignment_1");
					put(grammarAccess.getOperationAccess().getUnorderedGroup_1(), "rule__Operation__UnorderedGroup_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BugsDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BugsDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
